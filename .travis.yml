os: linux
dist: trusty
language: python

notifications:
  email:
    if: branch = master
    recipients:
      - giesselmann@molgen.mpg.de
    on_success: never
    on_failure: always

python:
    - "3.6"

cache:
  directories:
    - $HOME/docker




before_install:
    # tag for docker from branch
    - if [[ $TRAVIS_BRANCH == "master" ]]; then export DOCKER_TAG=latest;
      else export DOCKER_TAG=$TRAVIS_BRANCH; fi
    # Load cached docker images
    # - if [[ -d $HOME/docker ]]; then ls $HOME/docker/*.tar.gz | xargs -I {file} sh -c "zcat {file} | docker load"; fi

before_cache:
  # Save tagged docker images
    - >
      mkdir -p $HOME/docker && docker images -a --filter='dangling=false' --format '{{.Repository}}:{{.Tag}} {{.ID}}'
      | xargs -n 2 -t sh -c 'test -e $HOME/docker/$1.tar.gz || docker save $0 | gzip -2 > $HOME/docker/$1.tar.gz'

jobs:
    include:
        # Base stage with python3 and shared libs
        - &base
          stage: base
          env:
              - MODULE=base_alpine
          script:
              - docker build -t $MODULE -f singularity/$MODULE/Dockerfile .
        - <<: *base
          env:
              - MODULE=base_bionic
        # Build stage from base with gcc/g++ toolchain
        - &build
          stage: build
          env:
              - MODULE=build_alpine
          script:
              - docker build -t $MODULE -f singularity/$MODULE/Dockerfile --build-arg TAG=$DOCKER_TAG .
        - <<: *build
          env:
              - MODULE=build_bionic
        # Modules from build stage, copied into base stage
        - &modules
          stage: modules
          env:
              - MODULE=basecalling
          install: skip
          skript:
              - docker build -t $MODULE -f singularity/$MODULE/Dockerfile --build-arg TAG=$DOCKER_TAG .
        - <<: *modules
          env:
              - MODULE=alignment
        - <<: *modules
          env:
              - MODULE=methylation
        # Unit tests per module
        - stage: test
          install:
              - pip install -r requirements.txt
          script:
              - docker run --rm $DOCKER_USERNAME/base python3 -c "import h5py"
          before_cache: skip
          deploy: skip

after_success:
    - bash <(curl -s https://codecov.io/bash)

before_deploy:
    - echo "$DOCKER_PASSWORD" | docker login -u="$DOCKER_USERNAME" --password-stdin

deploy:
    - provider: script
      skip_cleanup: true
      script: docker tag $MODULE $DOCKER_USERNAME/$MODULE &&
              docker push $DOCKER_USERNAME/$MODULE &&
              docker images
      on:
          tag: false
          branch: master
    - provider: script
      skip_cleanup: true
      script: docker tag $MODULE $DOCKER_USERNAME/$MODULE:$TRAVIS_TAG &&
              docker push $DOCKER_USERNAME/$MODULE:$TRAVIS_TAG &&
              docker images
      on:
          tag: true
          branch: master
    - provider: script
      skip_cleanup: true
      script: docker tag $MODULE $DOCKER_USERNAME/$MODULE:$TRAVIS_BRANCH &&
              docker push $DOCKER_USERNAME/$MODULE:$TRAVIS_BRANCH &&
              docker images
      on:
          tag: false
          all_branches: true
          condition: $TRAVIS_BRANCH != "master"
